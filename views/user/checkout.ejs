<!-- Breadcrumb Start -->
<div class="col-12">
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <% breadcrumbs.forEach((crumb, index) => { %>
                <% if (index < breadcrumbs.length - 1) { %>
                    <li class="breadcrumb-item"><a href="<%= crumb.url %>"><%= crumb.name %></a></li>
                <% } else { %>
                    <li class="breadcrumb-item active" aria-current="page"><%= crumb.name %></li>
                <% } %>
            <% }) %>
        </ol>
    </nav>
</div>

<!-- Breadcrumb End -->

<style>
    /* Button Styles */
    #submit-button {
        width: 20%;
        background-color: #6f42c1;
        padding: 10px 20px;
        border-radius: 10px;
        color: white;
        border: none;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    #submit-button:hover {
        background-color: #5a2a8d;
    }

    /* Address Option Styles */
    .address-option {
        margin-bottom: 15px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: box-shadow 0.3s ease;
    }

    .address-option:hover {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .address-option p {
        margin: 0;
        font-size: 14px;
        color: #333;
    }

    .add-address-btn {
        margin-top: 20px;
        background-color: #28a745;
        border-color: #28a745;
    }

    .add-address-btn:hover {
        background-color: #218838;
        border-color: #1e7e34;
    }

    /* Order Total Section Styles */
    .order-total {
        border-radius: 8px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
    }

    .order-total h5 {
        font-size: 18px;
        margin-bottom: 15px;
    }

    .order-total .d-flex {
        margin-bottom: 10px;
    }

    .order-total .d-flex p {
        margin: 0;
        font-size: 14px;
    }

    /* Payment Section Styles */
    .payment-method {
        border-radius: 8px;
        background-color: #f9f9f9;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 20px;
        margin-top: 20px;
    }

    .payment-method .custom-control-label {
        font-size: 14px;
    }

    .edit-btn {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .payment-method .btn-primary {
        background-color: #6f42c1;
        border-color: #6f42c1;
        font-size: 16px;
        padding: 10px;
        border-radius: 8px;
    }

    .payment-method .btn-primary:hover {
        background-color: #5a2a8d;
        border-color: #5a2a8d;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
        .col-lg-8, .col-lg-4 {
            padding: 15px;
        }

        .order-total {
            margin-top: 20px;
        }
    }
</style>

<!-- Checkout Start -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <div class="col-lg-8">
            <h5 class="section-title position-relative text-uppercase mb-3">
                <span class="bg-secondary pr-3">Billing Address</span>
            </h5>
            <!-- Address Selection -->
            <div class="bg-light p-30 mb-5">
                <% if (addresses.length > 0) { %>
                    <h6 class="mb-3">Select Existing Address</h6>
                    <% addresses.forEach(function(address) { %>
                        <div class="address-option mb-3">
                            <input type="radio" name="address" id="address-<%= address._id %>" value="<%= address._id %>" onclick="selectAddress('<%= address._id %>')">
                            <label for="address-<%= address._id %>">
                                <p><strong><%= address.fullname %></strong></p>
                                <p><%= address.street %>, <%= address.city %>, <%= address.state %> - <%= address.pincode %></p>
                                <p><%= address.country %></p>
                                <p>Mobile No: <%= address.mobile %></p>
                            </label>
                            <button class="edit-btn btn btn-secondary mt-2" onclick="editAddress('<%= address._id %>')">Edit</button>
                        </div>
                    <% }) %>
                <% } else { %>
                    <p>No addresses found. Please add a new address.</p>
                <% } %>
                <button class="btn btn-primary add-address-btn mt-3" onclick="window.location.href='/add-address'">Add New Address</button>
            </div>
        </div>

        <div class="col-lg-4">
            <h5 class="section-title position-relative text-uppercase mb-3">
                <span class="bg-secondary pr-3">Order Total</span>
            </h5>
            
            <div class="pt-2">
                <form id="couponForm" class="mb-30" action="javascript:void(0);">
                    <div class="input-group">
                        <input type="text" id="couponCode" class="form-control border-0 p-4" placeholder="Coupon Code">
                        <div class="input-group-append">
                            <button id="couponButton" class="btn btn-primary">Apply Coupon</button>
                        </div>
                    </div>
                </form>
            <!-- Order Total Section -->
            <div class="order-total">
                
                <div class="border-bottom pb-3">
                    <h6 class="mb-3">Products</h6>
                    <% if (cart && cart.products.length > 0) { %>
                        <% cart.products.forEach(item => { %>
                            <div class="d-flex justify-content-between mb-2">
                                <p class="product-name"><%= item.productId.name %></p>
                                <p>₹<%= (item.productId.price * item.quantity).toFixed(2) %></p>
                            </div>
                        <% }) %>
                    <% } else { %>
                        <div class="text-center">Your cart is empty.</div>
                    <% } %>
                </div>
               
                <div class="border-bottom pt-3 pb-2">
                    <div class="d-flex justify-content-between mb-3">
                        <h6>Subtotal</h6>
                        <h6>₹<%= subtotal.toFixed(2) %></h6>
                    </div>
                
                    <div class="d-flex justify-content-between mb-3" id="shippingChargeRow" style="display: none;">
                        <h6>Shipping Charge</h6>
                        <h6 class="text-black" id="shippingChargeAmount">₹<%= shippingCharge.toFixed(2) %></h6>
                    </div>
                    <div id="couponDiscountRow" class="d-flex justify-content-between mb-3" style="display:none;">
                        <h6>Discount</h6>
                        <h6 id="discountAmount"> 0%</h6>
                    </div>
                
                    <div class="pt-2">
                        <div class="d-flex justify-content-between mt-2" id="finalTotal">
                            <h5>Total</h5>
                            <h5>₹<%= total.toFixed(2) %></h5>
                        </div>
                    </div>
                </div>
             
            <!-- Payment Method Section -->
            <div class="payment-method">
                <h5 class="section-title position-relative text-uppercase mb-3">
                    <span class="bg-secondary pr-3">Payment</span>
                </h5>
                <div class="bg-light p-30">
                    <div class="form-group">
                        <div class="custom-control custom-radio">
                            <input type="radio" class="custom-control-input" name="payment" id="cashondelivery" value="COD">
                            <label class="custom-control-label" for="cashondelivery">Cash On Delivery</label>
                        </div>
                    </div>
                
                    <div class="form-group mb-4">
                        <div class="custom-control custom-radio">
                            <input type="radio" class="custom-control-input" name="payment" id="razorpay" value="Razorpay">
                            <label class="custom-control-label" for="razorpay">Razorpay</label>
                        </div>
                    </div>
                
                    <div class="form-group mb-4">
                        <div class="custom-control custom-radio">
                            <input type="radio" class="custom-control-input" name="payment" id="wallet" value="Wallet">
                            <label class="custom-control-label" for="wallet">Wallet</label>
                        </div>
                    </div>
                </div>
                
                    <button class="btn btn-block btn-primary font-weight-bold py-3" onclick="placeOrder()">Place Order</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Checkout End -->

<!-- SweetAlert CSS and JS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

<!-- JavaScript for Handling Address Management -->
<!-- Updated JavaScript for Address Management -->
<script>
    let selectedAddressId;

    // Function to select an address
    function selectAddress(addressId) {
        // Remove the 'selected' class from all address options
        document.querySelectorAll('.address-option').forEach(option => {
            option.classList.remove('selected');
        });

        // Add the 'selected' class to the currently selected address option
        const selectedOption = document.getElementById(`address-${addressId}`);
        selectedOption.classList.add('selected');
        selectedAddressId = addressId; // Update the global selected address ID
    }

    // Function to place the order
    async function placeOrder() {
        // Get the selected payment method
        const paymentMethod = document.querySelector('input[name="payment"]:checked')?.value;

        // Get the final total amount
        const finalTotal = parseFloat(document.querySelector('#finalTotal h5:last-child').innerText.replace('₹', '').trim());

        // Get the product names
        const productNames = Array.from(document.querySelectorAll('.product-name')).map(p => p.innerText.trim());

        // Validate the selected address
        if (!selectedAddressId) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Please select an address!'
            });
            return;
        }

        // Validate the selected payment method
        if (!paymentMethod) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Please select a payment method!'
            });
            return;
        }

        try {
            // Make the fetch request to the server
            const response = await fetch('/checkout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    addressId: selectedAddressId,
                    paymentMethod: paymentMethod,
                    total: finalTotal,
                    productName: productNames
                })
            });

            // Parse the response
            const res = await response.json();

            // Check if the order was successful
            if (res.success) {
                if (paymentMethod === 'COD') {
                    handleOrderSuccess("Your order has been successfully placed.", "/orders");
                } else if (paymentMethod === 'Razorpay') {
                    // Set up Razorpay options
                    const options = {
                        key: res.key_id,
                        amount: res.amount,
                        currency: "INR",
                        name: res.product_name,
                        order_id: res.order_id,
                        handler: function(response) {
                            handleRazorpaySuccess(response, res.db_order_id);
                        },
                        prefill: {
                            name: res.name,
                            email: res.email,
                            contact: res.contact
                        },
                        notes: {
                            address: res.product_name
                        },
                        theme: {
                            color: '#3399cc'
                        }
                    };

                    const razorpayObject = new Razorpay(options);
                    razorpayObject.on('payment.failed', function(response) {
                        handleRazorpayFailure(response.error, res.db_order_id);
                    });

                    razorpayObject.open();
                }else if(paymentMethod === 'Wallet'){
				handleOrderSuccess("Your order has been successfully placed.", "/orders");
			}
        
            } else {
                // Handle the case where the response indicates failure
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: res.message || 'Failed to place your order. Please try again later.'
                });
            }
        } catch (error) {
            console.error('Error placing order:', error);
            Swal.fire({
                icon: 'error',
                title: 'Error placing order',
                text: 'An error occurred while processing your order. Please try again later.'
            });
        }
    }

    // Function to handle order success
    function handleOrderSuccess(message, redirectUrl) {
        console.log('Order Success:', message); // Debug log
        Swal.fire({
            icon: 'success',
            title: 'Success',
            text: message,
        }).then(() => {
            window.location.href = redirectUrl; // Redirect to the orders page
        });
    }

    // Function to handle Razorpay success
    function handleRazorpaySuccess(response, orderId) {
        console.log('Razorpay Payment Success:', response); // Debug log
        // Handle Razorpay payment success logic here (e.g., update order status)
        handleOrderSuccess("Payment successful, order placed.", "/orders");
    }

    // Function to handle Razorpay payment failure
    function handleRazorpayFailure(error, orderId) {
        console.error('Razorpay Payment Failure:', error); // Debug log
        Swal.fire({
            icon: 'error',
            title: 'Payment Failed',
            text: 'Your payment failed. Please try again.'
        });
        // Optionally handle payment failure (e.g., cancel the order in the database)
    }
    document.getElementById('couponButton').addEventListener('click', async () => {
    const couponCode = document.getElementById('couponCode').value;

    if (!couponCode) {
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: 'Please enter a coupon code!',
        });
        return;
    }

    try {
        const response = await fetch('/validateCoupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ couponCode }),
        });

        const result = await response.json();

        if (response.ok) {
            // Update the UI with the discount amount
            document.getElementById('discountAmount').innerText = ` ${result.discountAmount}%`;
            document.getElementById('couponDiscountRow').style.display = 'flex';
            updateTotal(result.discountAmount);
        } else {
            // Show error message
            Swal.fire({
                icon: 'error',
                title: 'Invalid Coupon',
                text: result.error,
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong while validating the coupon.',
        });
    }
});

// Function to update total after applying the coupon discount
function updateTotal(discountPercentage) {
    // Get the subtotal from the element
    const subtotal = parseFloat(document.querySelector('#finalTotal h5:last-child').innerText.replace('₹', '').trim());
    
    // Calculate the discount amount based on the percentage
    const discountAmount = (subtotal * discountPercentage) / 100;
    
    // Calculate the new total after applying the discount
    const newTotal = subtotal - discountAmount;
    
    // Update the DOM with the new total
    document.querySelector('#finalTotal h5:last-child').innerText = `₹${newTotal.toFixed(2)}`;
}

</script>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>