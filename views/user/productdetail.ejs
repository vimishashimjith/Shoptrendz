<style>
    .zoom-container {
        overflow: hidden;
    }
    .zoom-container img {
        transition: transform 0.5s ease;
        cursor: pointer;
    }
    .zoom-container img:hover {
        transform: scale(1.5);
    }
</style>

<div class="container-fluid pb-5">
    <div class="row px-xl-5">
        <!-- Product Images Section -->
        <div class="col-lg-5 mb-30">
            <div class="bg-light p-3 zoom-container">
                <img id="main-image" class="img-fluid" src="/uploads/<%= product.images[0].url %>" alt="Product Image">
            </div>
            <div class="row mt-3">
                <% for (let i = 1; i < product.images.length; i++) { %>
                    <div class="col-4 zoom-container">
                        <img class="img-fluid" src="/uploads/<%= product.images[i].url %>" alt="Product Thumbnail">
                    </div>
                <% } %>
            </div>
        </div>
        
        
        <!-- Product Details Section -->
       <!-- Product Details Section -->
<div class="col-lg-7 h-auto mb-30">
    <div class="h-100 bg-light p-30">
        <h3><%= product.name %></h3>
        <h3 class="font-weight-semi-bold mb-4">â‚¹<%= product.price %></h3>
        <p class="mb-4"><%= product.description %></p>
       
        <!-- Size Selection -->
        <div id="sizes-container" class="mb-3">
            <label for="size">Size:</label>
            <select id="size-select" name="sizes[0][size]" onchange="updateMaxQuantity()">
                <% product.sizes.forEach(size => { %>
                    <option value="<%= size.size %>" data-stock="<%= size.stock %>">
                        <%= size.size %> (Available: <%= size.stock %>)
                    </option>
                <% }) %>
            </select>
        </div>

        <!-- Quantity Selection -->
        <div>
            <label for="quantity">Quantity:</label>
            <input type="number" id="quantity" name="quantity" min="1" value="1" style="width: 50px; height: 40px; padding-left: 10px; font-size: 16px; margin-right: 1px;" required>
            <button class="btn btn-primary px-3" onclick="addToCart('<%= product._id %>')">
                <i class="fa fa-shopping-cart mr-1"></i> Add To Cart
            </button>
            <p id="stock-status" class="mt-2"></p>
        </div>
    </div>
</div>

    </div>
</div>

<script>
    // Function to update quantity input and stock status based on selected size
function updateMaxQuantity() {
    const sizeSelect = document.getElementById('size-select');
    const selectedSize = sizeSelect.options[sizeSelect.selectedIndex];
    const availableStock = parseInt(selectedSize.getAttribute('data-stock'), 10);

    const quantityInput = document.getElementById('quantity');
    quantityInput.max = availableStock; // Set the maximum value for the quantity input

    // Ensure the quantity doesn't exceed available stock
    if (quantityInput.value > availableStock) {
        quantityInput.value = availableStock; // Reset value if it exceeds available stock
    }

    // Update stock status
    const stockStatus = document.getElementById('stock-status');
    if (availableStock === 0) {
        stockStatus.textContent = 'Out of Stock';
        stockStatus.classList.add('text-danger');
    } else {
        stockStatus.textContent = `Stocks left: ${availableStock}`;
        stockStatus.classList.remove('text-danger');
    }
}

// Handles adding the product to the cart
function addToCart(productId) {
    const size = document.getElementById('size-select').value;
    const quantity = parseInt(document.getElementById('quantity').value, 10);
    const maxQuantity = parseInt(document.getElementById('quantity').max, 10);

    if (quantity > maxQuantity) {
        Swal.fire({
            title: 'Error!',
            text: `You can only add up to ${maxQuantity} units of this size.`,
            icon: 'error',
            confirmButtonText: 'Try Again'
        });
        return;
    }

    fetch(`/cart/${productId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ size, quantity })
    })
    .then(response => {
        if (!response.ok) {
            return response.json().then(err => { throw new Error(err.message); });
        }
        return response.json();
    })
    .then(data => {
        Swal.fire({
            title: 'Success!',
            text: 'Product added to cart successfully!',
            icon: 'success',
            confirmButtonText: 'Go to Cart',
            showCancelButton: true,
            cancelButtonText: 'Continue Shopping'
        }).then((result) => {
            if (result.isConfirmed) {
                window.location.href = '/cart'; 
            }
        });
    })
    .catch(error => {
        Swal.fire({
            title: 'Error!',
            text: error.message || 'An error occurred. Please try again later.',
            icon: 'error',
            confirmButtonText: 'Try Again'
        });
    });
}

// Initialize the page with the correct stock status
document.addEventListener('DOMContentLoaded', updateMaxQuantity);

   </script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
